import OpenAI from 'openai';

export const maxDuration = 60; 
export const dynamic = 'force-dynamic';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

function cleanResponse(text) {
    return text.replace(/„Äê\d+(?::\d+)*‚Ä†source„Äë/g, '');
}

export async function POST(request) {
    const { message, thread_id } = await request.json();

    if (!message) {
        return new Response('Bad request', { status: 400 });
    }

    console.log('Received message:', message);
    console.log('Thread ID:', thread_id);

    const assistantId = process.env.OPENAI_ASSISTANT_ID;
    console.log('Using Assistant ID:', assistantId);

    let thread;
    if (!thread_id) {
        thread = await openai.beta.threads.create();
        console.log(`Created new thread with ID: ${thread.id}`);
    } else {
        thread = await openai.beta.threads.retrieve(thread_id);
        console.log(`Retrieved existing thread with ID: ${thread.id}`);
    }

    await openai.beta.threads.messages.create(thread.id, {
        role: 'user',
        content: message
    });

    const encoder = new TextEncoder();

    return new Response(
        new ReadableStream({
            async start(controller) {
                controller.enqueue(encoder.encode(JSON.stringify({ thread_id: thread.id, wait: true }) + '\n'));

                try {
                    console.log('Creating run...');
                    const run = await openai.beta.threads.runs.create(
                        thread.id,
                        { 
                            assistant_id: assistantId,
                            instructions: `"Eres un asistente cordial y cooperativo, dise√±ado para comunicarte al nivel de un experto en salud. Tu tarea es proporcionar informaci√≥n especializada sobre enfermedades metax√©nicas, especialmente el dengue.
                                            <INSTRUCCIONES>:

                                            Saludo Inicial:

                                            Al recibir un saludo como "Hola", responde amablemente:
                                            "¬°Hola! Bienvenido a DENVBot, el chatbot de la Direcci√≥n General de Intervenciones Estrat√©gicas en Salud P√∫blica (DGIESP-MINSA). ü§ì ¬°Conversemos para reforzar tus conocimientos sobre el tratamiento y manejo del Dengue! üë©‚Äç‚öïÔ∏èüßë‚Äç‚öïÔ∏è ¬øC√≥mo te llamas?"

                                            Captura de Nombre:

                                            Recoge el primer <NOMBRE>. Una vez capturado, responde siempre:
                                            "Encantado, <NOMBRE>. ¬øQu√© informaci√≥n buscas sobre el dengue?"
                                            Si no obtienes el <NOMBRE>, procede directamente a responder la pregunta del usuario.

                                            Consulta de Documentos:

                                            Consulta primero haciendo File search para brindar las respuestas. Usa el comando <consulta_documentos> para verificar si hay informaci√≥n pertinente en los PDFs. Si no encuentras informaci√≥n pertinente, utiliza tu conocimiento.

                                            Respuestas Basadas en Evidencia:

                                            Tus respuestas deben ser fieles a los documentos, de File Search concisas y basadas en evidencia. Razona tus respuestas bas√°ndote en los datos de los PDF cuando sea necesario.

                                            Enfoque en el Dengue:

                                            Mant√©n la conversaci√≥n enfocada en el dengue o enfermedades metax√©nicas. Incluye siempre una pregunta al final de tus respuestas para mantener el di√°logo.
                                            Usa listas con vi√±etas para claridad cuando sea apropiado.
                                            Formatea las respuestas de manera amable, destacando informaci√≥n importante.

                                            C√°lculos y Solicitud de Informaci√≥n Adicional:

                                            Realiza c√°lculos solicitados y pide informaci√≥n adicional si es necesario.

                                            Despedida:

                                            Si el usuario se despide o ya no requiere el chat, responde:
                                            "¬°De nada! Desde el MINSA ha sido un placer ayudarte. Si en el futuro tienes m√°s preguntas o necesitas m√°s informaci√≥n, no dudes en contactarnos. ¬°Que tengas un excelente d√≠a! üôÇ"`
                        }
                    );
                    console.log(`Created run with ID: ${run.id}`);

                    let isCompleted = false;
                    while (!isCompleted) {
                        const runStatus = await openai.beta.threads.runs.retrieve(thread.id, run.id);
                        console.log(`Run status: ${runStatus.status}`);

                        if (runStatus.status === 'completed') {
                            isCompleted = true;
                            const messages = await openai.beta.threads.messages.list(thread.id);
                            const lastMessage = messages.data[0];
                            console.log('Full message object:', JSON.stringify(lastMessage, null, 2));
                            
                            if (lastMessage.content && lastMessage.content[0] && lastMessage.content[0].text) {
                                let messageText = lastMessage.content[0].text.value;
                                messageText = cleanResponse(messageText);
                                const formattedMessage = messageText.replace(/\\n/g, '\n');
                                console.log("Sending message:", formattedMessage);
                                
                                if (lastMessage.content[0].text.annotations) {
                                    console.log('Annotations:', JSON.stringify(lastMessage.content[0].text.annotations, null, 2));
                                }
                                
                                // Dividimos el mensaje en chunks m√°s peque√±os para streaming
                                const chunkSize = 100; // Ajusta este valor seg√∫n sea necesario
                                for (let i = 0; i < formattedMessage.length; i += chunkSize) {
                                    const chunk = formattedMessage.slice(i, i + chunkSize);
                                    controller.enqueue(encoder.encode(JSON.stringify({ message: chunk, role: 'assistant' }) + '\n'));
                                    // Peque√±a pausa para simular typing
                                    await new Promise(resolve => setTimeout(resolve, 50));
                                }
                            } else {
                                console.error('Unexpected message format:', lastMessage);
                                controller.enqueue(encoder.encode(JSON.stringify({ 
                                    message: "Lo siento, ha ocurrido un error inesperado en el formato del mensaje.", 
                                    role: 'assistant' 
                                }) + '\n'));
                            }
                        } else if (runStatus.status === 'requires_action') {
                            console.log('Run requires action:', JSON.stringify(runStatus.required_action, null, 2));
                        } else if (['queued', 'in_progress'].includes(runStatus.status)) {
                            controller.enqueue(encoder.encode(JSON.stringify({ wait: true }) + '\n'));
                            await new Promise(resolve => setTimeout(resolve, 1000));
                        } else {
                            console.log(`Unexpected run status: ${runStatus.status}`);
                            isCompleted = true;
                            controller.enqueue(encoder.encode(JSON.stringify({ 
                                message: "Lo siento, ha ocurrido un error inesperado.", 
                                role: 'assistant' 
                            }) + '\n'));
                        }
                    }
                } catch (error) {
                    console.error('Error in run process:', error);
                    controller.enqueue(encoder.encode(JSON.stringify({ 
                        message: "Lo siento, ha ocurrido un error en el proceso.", 
                        role: 'assistant' 
                    }) + '\n'));
                } finally {
                    controller.close();
                }
            }
        }),
        { 
            status: 200, 
            headers: { 'Content-Type': 'text/event-stream' } 
        }
    );
}